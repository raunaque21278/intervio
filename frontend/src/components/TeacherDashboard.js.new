import { useEffect, useState } from 'react';
import socket from '../socket';
import '../styles/TeacherDashboardNew.css';

const TeacherDashboard = ({ user }) => {
  const [question, setQuestion] = useState('');
  const [charCount, setCharCount] = useState(0);
  const [options, setOptions] = useState([
    { text: '', isCorrect: false },
    { text: '', isCorrect: false }
  ]);
  const [pollActive, setPollActive] = useState(false);
  const [results, setResults] = useState({});
  const [students, setStudents] = useState([]);
  const [answeredStudents, setAnsweredStudents] = useState([]);
  const [currentPoll, setCurrentPoll] = useState(null);
  // eslint-disable-next-line no-unused-vars
  const [timeLimit, setTimeLimit] = useState(60); // Time limit in seconds - will be used for timer functionality

  useEffect(() => {
    // Listen for new questions
    socket.on('new_question', (data) => {
      setCurrentPoll(data);
    });
    
    // Listen for student updates
    socket.on('update_students', (updatedStudents) => {
      setStudents(updatedStudents);
    });

    // Listen for live results
    socket.on('live_results', (data) => {
      setResults(data.results);
      
      // Update the list of students who have answered
      const studentIds = Object.keys(data.answeredBy || {});
      const answeredStudentsList = students.filter(student => 
        studentIds.includes(student.id)
      );
      setAnsweredStudents(answeredStudentsList);
      
      // Update current poll data
      if (data.questionNumber) {
        setCurrentPoll({
          question: data.question,
          options: data.options,
          questionNumber: data.questionNumber,
          isActive: data.isActive
        });
      }
      
      // Keep poll active as long as it's active on the server
      if (data.isActive) {
        setPollActive(true);
      }
    });

    // Listen for poll ended
    socket.on('poll_ended', (data) => {
      // Don't set pollActive to false, we want to keep showing the poll
      // Just update results and store data about completed poll
      setResults(data.results);
      
      // Store poll data with question number
      if (data.questionNumber) {
        setCurrentPoll({
          question: data.question,
          options: data.options,
          questionNumber: data.questionNumber,
          isActive: false,
          isEnded: true
        });
      }
    });

    return () => {
      socket.off('new_question');
      socket.off('update_students');
      socket.off('live_results');
      socket.off('poll_ended');
    };
  }, [students]);

  const handleAddOption = () => {
    if (options.length < 4) {
      setOptions([...options, { text: '', isCorrect: false }]);
    }
  };

  const handleOptionChange = (index, value) => {
    const newOptions = [...options];
    newOptions[index].text = value;
    setOptions(newOptions);
  };

  const handleIsCorrectChange = (index, isCorrect) => {
    const newOptions = [...options];
    newOptions[index].isCorrect = isCorrect;
    setOptions(newOptions);
  };

  // eslint-disable-next-line no-unused-vars
  const handleRemoveOption = (index) => {
    if (options.length > 2) {
      const newOptions = options.filter((_, i) => i !== index);
      setOptions(newOptions);
    }
  }; // Function will be used in future enhancements for option removal

  const handleCreatePoll = () => {
    if (!question.trim()) {
      alert('Please enter a question');
      return;
    }

    const validOptions = options.filter(opt => opt.text.trim());
    if (validOptions.length < 2) {
      alert('Please provide at least 2 options');
      return;
    }

    socket.emit('create_poll', {
      question,
      options: validOptions.map(opt => opt.text),
      timeLimit
    });

    setPollActive(true);
  };

  const handleEndPoll = () => {
    socket.emit('end_poll');
    setPollActive(false);
  };
  
  const handleNewQuestion = () => {
    // Reset form for a new question
    setQuestion('');
    setOptions([
      { text: '', isCorrect: false },
      { text: '', isCorrect: false }
    ]);
    setResults({});
    setPollActive(false);
    setCurrentPoll(null);
  };

  const handleRemoveStudent = (studentId) => {
    socket.emit('remove_student', studentId);
  };

  return (
    <div className="teacher-container">
      {!pollActive ? (
        <>
          <div className="intervue-poll-badge">Intervue Poll</div>
          
          <div className="header-section">
            <h1>Let's Get Started</h1>
            <p>you'll have the ability to create and manage polls, ask questions, and monitor your students' responses in real-time.</p>
          </div>
          
          <div className="form-section">
            <div className="form-group">
              <div className="form-row">
                <div className="form-label">Enter your question</div>
                <div className="time-dropdown">60 seconds <span className="dropdown-arrow">â–¼</span></div>
              </div>
              <textarea
                value={question}
                onChange={(e) => {
                  setQuestion(e.target.value);
                  setCharCount(e.target.value.length);
                }}
                placeholder="Enter your question here..."
                disabled={pollActive}
                rows={3}
                maxLength={150}
                className="question-textarea"
              />
              <div className="char-count">{charCount}/150</div>
            </div>

            <div className="options-section">
              <div className="options-header">
                <span>Edit Options</span>
                <span>Is It Correct?</span>
              </div>
              
              {options.map((option, index) => (
                <div key={index} className="option-row">
                  <div className="option-number">{index + 1}</div>
                  <input
                    type="text"
                    value={option.text}
                    onChange={(e) => handleOptionChange(index, e.target.value)}
                    placeholder="Enter option text here..."
                    disabled={pollActive}
                    className="option-input"
                  />
                  <div className="radio-options">
                    <label className="radio-container">
                      <input
                        type="radio"
                        name={`correct-${index}`}
                        checked={option.isCorrect}
                        onChange={() => handleIsCorrectChange(index, true)}
                      />
                      <span className="radio-label">Yes</span>
                    </label>
                    <label className="radio-container">
                      <input
                        type="radio"
                        name={`correct-${index}`}
                        checked={!option.isCorrect}
                        onChange={() => handleIsCorrectChange(index, false)}
                      />
                      <span className="radio-label">No</span>
                    </label>
                  </div>
                </div>
              ))}
              
              {options.length < 4 && !pollActive && (
                <button onClick={handleAddOption} className="add-option-btn">
                  + Add More option
                </button>
              )}
            </div>
            
            <button 
              onClick={handleCreatePoll}
              className="ask-question-btn"
              disabled={pollActive}
            >
              Ask Question
            </button>
          </div>
        </>
      ) : (
        <>
          <button className="view-history-btn">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
              <path d="M8 3.5a.5.5 0 0 0-1 0V9a.5.5 0 0 0 .252.434l3.5 2a.5.5 0 0 0 .496-.868L8 8.71z"/>
              <path d="M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16m7-8A7 7 0 1 1 1 8a7 7 0 0 1 14 0"/>
            </svg>
            View Poll history
          </button>
          
          <div className="results-container">
            <div className="question-title">Question</div>
            
            <div className="poll-card">
              <div className="poll-question">
                <h3>{currentPoll?.question || question}</h3>
              </div>
              <div className="poll-results">
                {options
                  .filter(opt => opt.text.trim())
                  .map((option, index) => {
                    const voteCount = results[option.text] || 0;
                    const totalVotes = Object.values(results).reduce((sum, count) => sum + count, 0) || 1;
                    const percentage = Math.round((voteCount / totalVotes) * 100);
                    
                    return (
                      <div key={index} className="result-item">
                        <div className="result-header">
                          <div className="result-option">
                            <span className="option-circle">{index + 1}</span>
                            {option.text}
                          </div>
                          <div className="result-percentage">{percentage}%</div>
                        </div>
                        <div className="progress-container">
                          <div 
                            className="progress"
                            style={{ width: `${percentage}%` }}
                          ></div>
                        </div>
                        <div className="votes-info">
                          <span>{voteCount} vote{voteCount !== 1 ? 's' : ''}</span>
                        </div>
                      </div>
                    );
                  })}
              </div>
            </div>
            
            <button onClick={handleNewQuestion} className="ask-new-question-btn">
              + Ask a new question
            </button>
          
            {/* Hidden button for ending poll - can be triggered from chat interface */}
            <button onClick={handleEndPoll} style={{display: 'none'}} className="end-poll-btn">
              End Poll
            </button>
          </div>
          
          <div className="chat-button">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" viewBox="0 0 16 16">
              <path d="M8 15c4.418 0 8-3.134 8-7s-3.582-7-8-7-8 3.134-8 7c0 1.76.743 3.37 1.97 4.6-.097 1.016-.417 2.13-.771 2.966-.079.186.074.394.273.362 2.256-.37 3.597-.938 4.18-1.234A9.06 9.06 0 0 0 8 15z"/>
            </svg>
          </div>
        </>
      )}
    </div>
  );
};

export default TeacherDashboard;
